name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKER_HUB_USERNAME}}
          password: ${{secrets.DOCKER_HUB_PASSWORD}}

      - name: Build and push docker image
        run: |
          docker compose -f docker-compose.yml build
          docker tag random_user_generator-web:latest ${{secrets.DOCKER_HUB_USERNAME}}/random_user_generator-web:latest
          docker push ${{secrets.DOCKER_HUB_USERNAME}}/random_user_generator-web:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup SSH
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" | base64 --decode > ~/ec2-key.pem
          chmod 600 ~/ec2-key.pem

      - name: Deploy to EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          scp -o StrictHostKeyChecking=no -i ~/ec2-key.pem docker-compose.yml ubuntu@${{ secrets.EC2_HOST }}:~/docker-compose.yml
          scp -o StrictHostKeyChecking=no -i ~/ec2-key.pem docker-stack.yml ubuntu@${{ secrets.EC2_HOST }}:~/docker-stack.yml
          ssh -o StrictHostKeyChecking=no -i ~/ec2-key.pem ubuntu@${{ secrets.EC2_HOST }} << EOF
          
          # Initialize Docker Swarm if it's not already initialized
          docker swarm init || true
          
          # Pull the latest image from Docker Hub
          docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/random_user_generator-web:latest
          
          # Remove any existing stack
          docker stack rm random_user_generator || true
          docker system prune -f
          
          # Deploy the docker stack
          docker stack deploy -c ~/docker-stack.yml random_user_generator
          
          #Checking swarm status
          docker stack services random_user_generator
          
          # Checking service logs for debugging
          docker service logs random_user_generator

          # Optionally, check the Docker Compose configuration
          docker-compose -f ~/docker-compose.yml config

          # Optionally, check the Docker Compose version
          docker-compose --version
          
          EOF
          
          
